---
# taches communes ECM
- include_vars: '{{ includefile }}'
  with_first_found:
    - files:
        - '{{ ansible_os_family }}.yml'
      skip: True
  loop_control:
    loop_var: includefile
  tags: vars

- name: get date
  command: 'date +%s'
  register: now
  changed_when: False
  check_mode: False

- set_fact:
    do_sys: '{% if "criecm" in ansible_local and ( ansible_local.criecm.common.version | default(0) | int >= common_version or ansible_local.criecm.common.last | default(0) >= now.stdout | int - 86400 ) and not do_sysadm %}no{% else %}yes{% endif %}'
    do_smartd: '{% if is_jail or is_vm or not do_smart %}False{% else %}True{% endif %}'
  tags: vars

- debug: var=do_sys

- name: resolv.conf
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    owner: root
    mode: '0644'
    backup: yes
  tags: resolver
  when: not is_jail and do_sys and do_resolvconf

- name: facts.d
  file:
    path: '{{ etcprefix }}/etc/ansible/facts.d'
    state: directory

- include_tasks: '{{ includefile }}'
  with_first_found:
    - files:
        - '{{ ansible_os_family }}.yml'
      skip: True
  loop_control:
    loop_var: includefile
  when: do_sys
  tags: vars

# pkgs
- name: install packages
  include_tasks: 'pkgs-{{ ansible_os_family }}.yml'
  tags: pkg

# ntp
- name: config ntpd
  include_tasks: ntpd.yml
  when: 'ntp_servers or ntp_pools and not is_jail and not is_vm and do_sys'
  tags: ntp

# smartd
- name: lsdisks
  shell: |
    smartctl --scan-open | awk '/^\// {gsub("#.*$",""); args=""; dev=$1; for(i=2;i<=NF;i++){args=args" "$i;}printf("smartctl -a %s %s > /dev/null && echo %s %s\n",dev,args,dev,args);}' | sh
  register: lsdisks
  ignore_errors: true
  changed_when: false
  tags: smartd
- set_fact:
    disks: '{{ lsdisks.stdout_lines | default([]) }}'
    cacheable: true
  when: do_smartd and not disks | default([]) | count > 0
  tags: smartd

- name: smartd
  block:
    - command: 'grep ^/ {{ etcprefix }}/etc/smartd.conf'
      ignore_errors: yes
      register: smarted
    - template:
        src: smartd.conf.j2
        dest: '{{ etcprefix }}/etc/smartd.conf'
        force: '{% if smarted.rc == 0 %}no{% else %}yes{% endif %}'
      notify: restart smartd
    - service:
        name: '{{ smartd_service }}'
        state: started
        enabled: true
  when: not is_jail and not is_vm and do_sys and do_smartd and disks | count > 0
  tags: smartd

# x509
- block:
  - name: Installe CA local
    copy:
      src: '{{x509_ca_file}}'
      dest: '{{x509_ca_path}}'
      owner: root
      group: 0
      mode: '0644'
  - name: CA local (debian)
    file:
      dest: '/usr/share/ca-certificates/local'
      state: directory
    when: ansible_os_family == "Debian"
  - name: register local CA (debian)
    copy:
      src: '{{x509_ca_file}}'
      dest: /usr/share/ca-certificates/local/local.crt
    register: accopied
    when: ansible_os_family == "Debian"
  - name: ca-certificates.conf
    lineinfile:
      line: 'local/localac.crt'
      dest: /etc/ca-certificates.conf
    when: accopied.changed | default(False)
    register: certline
  - name: update-ca-certificates
    command: '/usr/sbin/update-ca-certificates'
    when: certline.changed | default(False)
  when: x509_ca_file != '' and do_sys
  tags: x509

# syslog
- name: syslog client
  include_tasks: 'syslog-{{ ansible_os_family }}.yml'
  when: syslog_server != '' and not is_syslogd and do_sys
  tags: syslog

# snmp (missing Debian and OpenBSD)
- name: snmp server
  include_tasks: 'snmpd-{{ ansible_os_family }}.yml'
  when: not is_jail and not is_vm and do_sys and do_snmp
  tags: snmpd

# munin config
- name: munin
  include_role:
    name: criecm.munin
  when: munin_host != '' and munin_servers | count() > 0 and not is_jail and do_sys
  tags: munin

# ldap TLS client config
- name: ldap client
  include_tasks: ldap.yml
  when: ldap_base != "" and ldap_uri != "" and x509_ca_path != "" and do_sys
  tags: ldap

# sshd config and keys
# root ssh access and authorized_keys
- include_tasks: sshd.yml
  when: do_sys
  tags: sshd

# root shell config
- name: root shell
  include_tasks: rootshell.yml
  when: 'root_shell != "" and do_sys'
  tags: rootshell

# gits helper
- name: gits
  include_tasks: gits.yml
  tags: gits
  when: 'gits | union(host_gits) | union(role_gits) | count() > 0 and do_sys'

# crons
- name: crons
  cron:
    job: '{{ cron.job | default(omit) }}'
    minute: '{{ cron.minute | default(omit) }}'
    hour: '{{ cron.hour | default(omit) }}'
    day: '{{ cron.day | default(omit) }}'
    env: '{{ cron.env | default(omit) }}'
    month: '{{ cron.month | default(omit) }}'
    special_time: '{{ cron.special_time | default(omit) }}'
    user: '{{ cron.user | default(omit) }}'
    weekday: '{{ cron.weekday | default(omit) }}'
    name: '{{ cron.name | default(omit) }}'
    state: '{{ cron.state | default("present") }}'
  with_items: '{{ crons | union(host_crons) | union(role_crons) }}'
  loop_control:
    loop_var: cron
  tags: crons
  when: crons | union(host_crons) | union(role_crons) | count > 0 and do_sys

# mailrelay
- name: mailrelay
  include_tasks: 'mailrelay-{{ ansible_os_family }}.yml'
  when: 'mailrelay != "" and not is_mailrelay and do_sys'
  tags: mailrelay

- name: alias mail root
  lineinfile:
    dest: "{{ mailaliases }}"
    line: "root: {{ rootmailto }}"
    regexp: '^root:'
  notify: newaliases
  when: rootmailto != '' and do_sys
  tags: mailclient

- name: export mailrelay var
  set_fact:
    mailrelay: '{{ mailrelay }}'
    cacheable: yes
  tags: vars,mailrelay

# NUT (Network Ups Tools)
- name: Network Ups Tools
  include_tasks: 'mailrelay-{{ ansible_os_family }}.yml'
  when: 'nut_monitor != "" and not is_vm and not is_jail and do_sys'
  tags: nut

# ocsinventory agent
- name: ocsinventory agent
  include_tasks: 'ocsinventory-{{ ansible_os_family }}.yml'
  when: ocsinventory_server != "" and not is_jail and not is_vm and do_sys
  tags: ocsinventory

- name: fact done
  blockinfile:
    path: '{{ etcprefix }}/etc/ansible/facts.d/criecm.fact'
    marker: '# {mark} ANSIBLE criecm.common BLOCK'
    block: |
      [common]
      version={{ common_version }}
      is_jail={{ is_jail }}
      is_vm={{ is_vm }}
      last={{ now.stdout }}
    create: yes
  when: do_sys
