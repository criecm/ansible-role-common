---
# get jail status
- name: get jail status
  command: 'sysctl -n security.jail.jailed'
  failed_when: False
  check_mode: False
  changed_when: False
  register: jail_status
  tags: vars

- name: register is_jail
  set_fact:
    is_jail: True
    cacheable: yes
  when: jail_status.rc == 0 and jail_status.stdout == "1"
  tags: vars

- name: get vm guest status
  command: 'sysctl -n kern.vm_guest'
  failed_when: False
  check_mode: False
  changed_when: False
  register: vm_status
  tags: vars

- name: register is_vm
  set_fact:
    is_vm: True
    cacheable: yes
  when: ( vm_status.rc == 0 and vm_status.stdout != "none" ) or
        (jail_status.rc == 0 and jail_status.stdout == "1")
  tags: vars

- name: timezone
  block:
    - name: get timezone
      command: cat /var/db/zoneinfo
      register: zoneinfo
      changed_when: False
      ignore_errors: True
      check_mode: False
    - name: stat localzone
      stat:
        path: /etc/localtime
      register: statlocaltime
    - name: stat /usr/share/zoneinfo/{{ host_timezone }}
      stat:
        path: '/usr/share/zoneinfo/{{ host_timezone }}'
      register: statzone
    - name: set timezone
      command: 'tzsetup {{ host_timezone }}'
      when: zoneinfo.stdout != host_timezone or
          ( statzone.stat.checksum != statlocaltime.stat.checksum )
  tags: timezone

- name: http proxy
  replace:
    after: 'default:\\'
    regexp: '^(?P<debut>\t:setenv=BLOCKSIZE=K)((,[hH][tT][tT][pP][sS]?_[Pp][Rr][Oo][Xx][Yy]=[^,:]+)+)?(?P<reste>[^:]+)?:\\$'
    replace: '\g<debut>,http_proxy={{ http_proxy | regex_replace(":","\\\\c") }},https_proxy={{ http_proxy | regex_replace(":","\\\\c") }},HTTP_PROXY={{ http_proxy | regex_replace(":","\\\\c") }},HTTPS_PROXY={{ http_proxy | regex_replace(":","\\\\c") }}\g<reste>:\\'
    dest: /etc/login.conf
  when: http_proxy | default(False)

- name: cap_mkdb & pwd_mkdb
  block:
    - name: get login.conf stats
      stat:
        path: '{{ item }}'
      register: statloginconf
      with_items:
        - /etc/login.conf
        - /etc/login.conf.db
    - name: cap_mkdb
      command: 'cap_mkdb /etc/login.conf'
      when: statloginconf.results[0].stat.mtime > statloginconf.results[1].stat.mtime
    - name: get master.passwd stats
      stat:
        path: '{{ item }}'
      register: statpwd
      with_items:
        - /etc/master.passwd
        - /etc/pwd.db
    - name: pwd_mkdb
      command: 'pwd_mkdb /etc/master.passwd'
      when: statpwd.results[0].stat.mtime > statpwd.results[1].stat.mtime
  tags: vars, sanity
  when: do_sys

- name: list disks
  block:
    - name: is mfi ?
      command: 'mfiutil show drives'
      check_mode: False
      failed_when: False
      changed_when: False
      register: has_mfi
    - name: mfip_load in loader.conf
      lineinfile:
        dest: /boot/loader.conf
        line: 'mfip_load="YES"'
        regexp: '^mfip_load='
      register: loadrc
      when: has_mfi.stdout_lines | count() > 0
    - name: kldload mfip
      command: 'kldload mfip'
      ignore_errors: True
      when: has_mfi.stdout_lines | count() > 0 and loadrc.changed
  when: do_sys

- name: hardening freebsd
  block:
    - name: newsyslog.conf.d
      file:
        dest: /usr/local/etc/newsyslog.conf.d
        state: directory
    - name: rc.conf
      lineinfile:
        dest: /etc/rc.conf
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
      with_items:
        - { regexp: '^clear_tmp_enable=', line: 'clear_tmp_enable="YES"' }
    - name: sysctl's
      lineinfile:
        dest: /etc/sysctl.conf
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
      with_items: '{{ common_freebsd_sysctls }}'
      when: 'freebsd_allow_see_other | default(False)'
  tags: baseconf, security
  when: do_sys or do_ssi

- name: stat /home
  stat:
    path: /home
  register: stathome

- name: get mounts
  shell: "mount"
  register: mounts
  changed_when: False

- name: real /home instead of link to /usr/home
  block:
    - name: fact /usr/home
      set_fact:
        usrhomeiszfs: '{% if mounts.stdout is search("on /usr/home .*zfs") %}True{% else %}False{% endif %}'
        usrhomemount: '{{ mounts.stdout_lines | select("search","on /usr/home ") | default([""]) | first | split(" ") | first | string }}'
    - name: rm /home
      file:
        path: /home
        state: absent
    - name: zfs rename /usr/home
      block:
        - name: zfs rename
          command: 'zfs rename {{ usrhomemount }} {{ usrhomemount | regex_replace("/usr","") }}'
        - name: zfs mountpoint
          command: 'zfs set mountpoint=/home {{ usrhomemount | regex_replace("/usr","") }}'
      when: usrhomeiszfs and usrhomemount != ""
    - name: mv /usr/home /home
      command: mv /usr/home /home
      when: not usrhomeiszfs and usrhomemount == ""
  when: do_sys and stathome.stat.exists and stathome.stat.islnk and stathome.stat.lnk_target == "usr/home"
