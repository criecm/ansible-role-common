---
- name: get vm guest status
  shell: 'dmesg | egrep "(on KVM|Virtual HD|VMware|Xen virtual console)"'
  failed_when: False
  check_mode: False
  changed_when: False
  register: vm_status

- name: register is_vm
  set_fact:
    is_vm: True
  when: vm_status.rc == 0

- name: installe debconf-utils
  apt:
    name: debconf-utils
    state: installed
  tags: baseconf, pkg

# timezone
- block:
  - name: get timezone
    command: cat /etc/timezone
    register: zoneinfo
    changed_when: False
    ignore_errors: True
  - name: set timezone
    command: 'echo {{ host_timezone }} > /etc/timezone'
    when: zoneinfo.stdout != host_timezone
  tags: timezone
  when: do_sysadm

# locales
- name: set locales
  lineinfile:
    dest: /etc/locale.gen
    line: '{{ locale }}'
    regexp: '{{ locale }}'
  with_items:
    - en_US.UTF-8 UTF-8
    - fr_FR.UTF-8 UTF-8
  loop_control:
    loop_var: locale
  notify: debian regen locales
  tags: locales
  when: do_sysadm

# packages
- name: packages
  apt:
    name: '{{ item }}'
    state: present
  with_items:
    - zsh
    - git
    - ntp
    - ldap-utils
    - munin-node
    - '{{ pkgs }}'
    - '{{ role_pkgs }}'
    - '{{ host_pkgs }}'
  tags: pkg

# ocsinventory
- block:
  - name: config ocsinventory/debconf
    debconf:
      name: ocsinventory-agent
      question: '{{ item.q }}'
      vtype: '{{ item.t }}'
      value: '{{ item.v }}'
    with_items:
      - { q: 'ocsinventory-agent/tag', t: 'string', v: '{{ ocsinventory_tag }}' }
      - { q: 'ocsinventory-agent/method', t: 'select', v: 'https' }
      - { q: 'ocsinventory-agent/server', t: 'string', v: '{{ ocsinventory_server }}' }
  - name: install ocsinventory-agent
    apt:
      name: ocsinventory-agent
      state: present
  - name: config
    copy:
      dest: /etc/ocsinventory/ocsinventory-agent.cfg
      content: |
        server={{ ocsinventory_server }}
        basevardir=/var/db/ocsinventory-agent
        {% if ocsinventory_tag %}tag={{ ocsinventory_tag }}{% endif %}
  - name: run ocsinventory-agent
    command: '/usr/bin/ocsinventory-agent'
    failed_when: False
    changed_when: False
  tags: ocsinventory
  when: ocsinventory_server != "" and not is_vm and do_sysadm

# mailrelay
- block:
  - name: installe postfix
    apt:
      name: postfix
      state: present

  # TIP: pour transformer le format debconf en liste ci-dessous:
  # debconf-get-selections | grep ^postfix | awk '{printf("     - { name='\''%s'\'', question='\''%s'\'', vtype='\''%s'\'', value='\''%s",$1,$2,$3,$4); for(i=5;i<=NF;i++){printf(" %s",$i);} printf("'\'' }\n");}' | sed 's/$HOSTNAME/{{ansible_fqdn}}/; s/$RELAYHOST/{{mailrelay}}/;'
  - name: configure postfix
    debconf:
      name: "{{item.name}}"
      question: "{{item.question}}"
      value: "{{item.value}}"
      vtype: "{{item.vtype}}"
    with_items:
      - { name: 'postfix', question: 'postfix/root_address', value: 'root+{{ansible_nodename}}@{{maildomain}}', vtype: 'string' }
      - { name: 'postfix', question: 'postfix/mynetworks', vtype: 'string', value: '127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128' }
      - { name: 'postfix', question: 'postfix/mailname', vtype: 'string', value: '{{ansible_hostname}}.{{maildomain}}' }
      - { name: 'postfix', question: 'postfix/destinations', vtype: 'string', value: '{{ansible_fqdn}}, localhost, localhost' }
      - { name: 'postfix', question: 'postfix/relayhost', vtype: 'string', value: '{{mailrelay}}' }
      - { name: 'postfix', question: 'postfix/main_mailer_type', vtype: 'select', value: 'Satellite system' }
      - { name: 'postfix', question: 'postfix/procmail', vtype: 'boolean', value: 'false' }
    notify: reconfigure postfix
  when: mailrelay != '' and not is_mailrelay and do_sysadm
  tags: mailclient

- name: syslog central
  template:
    src: rsyslog_ecm.conf.j2
    dest: /etc/rsyslog.d/ecm.conf
    mode: 600
  when: syslog_server != '' and not is_syslogd and (do_sysadm or do_ssi)
  tags: syslog
  notify: restart Debian rsyslog

# UPS
- block:
  - name: NUT
    apt:
      name: nut-client
      state: present
    tags: pkg, ups
  - name: nut.conf
    copy:
      content: |
        MODE={{ nut_mode }}
      dest: /etc/nut/nut.conf
    tags: conf, ups
  - name: upsmon.conf
    template:
      src: upsmon.conf.j2
      dest: /etc/nut/upsmon.conf
      mode: '0640'
      group: nut
    tags: conf, ups
  - name: activate
    service:
      name: nut-client
      state: started
      enabled: True
    tags: ups
  when: nut_monitor != "" and not is_vm and do_sysadm
  
